# Define a Relay Cursor type:
# https://relay.dev/graphql/connections.htm#sec-Cursor
scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type TodoConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo
  cursor: Cursor!
}

# These enums are matched to the entgql annotations in ent/schema
# Note that the naming must take the form of <T>OrderField / <T>Order for autobinding to the generated ent types
# Alternatively @goModel directive can be used for manual type binding
enum TodoOrderField {
  CREATED_AT
  PRIORITY
  STATUS
  TEXT
}

enum OrderDirection {
  ASC
  DESC
}

input TodoOrder {
  direction: OrderDirection!
  field: TodoOrderField
}

# Maps a Time GraphQL scalar to a Go time.Time struct
scalar Time

# Define an enumeration type and map it later to Ent enum (Go type)
# https://graphql.org/learn/schema/#enumeration-types
enum Status {
  IN_PROGRESS
  COMPLETED
}

interface Node {
  id: ID!
}

# Define an object type and map it later to the generated Ent model
type Todo implements Node {
  id: ID!
  createdAt: Time
  status: Status!
  priority: Int!
  text: String!
  parent: Todo
  children: [Todo!]
}

# Define an input type for the mutation below
# https://graphql.org/learn/schema/#input-types
input TodoInput {
  status: Status! = IN_PROGRESS
  priority: Int
  text: String!
  parent: ID
}

# Define a mutation for creating Todos
type Mutation {
  createTodo(todo: TodoInput!): Todo!
}

# Define a query for getting all Todos
type Query {
  todos(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: TodoOrder
  ): TodoConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}
